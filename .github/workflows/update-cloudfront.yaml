name: Update CloudFront Distribution

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1

jobs:
  update-cloudfront:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get CloudFront distribution ID
        id: get-distribution
        run: |
          DIST_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?contains(Comment, '${{ secrets.PROJECT_NAME }}')].Id | [0]" \
            --output text)

          if [ "$DIST_ID" == "None" ] || [ -z "$DIST_ID" ]; then
            echo "Error: CloudFront distribution not found for project: ${{ secrets.PROJECT_NAME }}"
            exit 1
          fi

          echo "distribution_id=${DIST_ID}" >> $GITHUB_OUTPUT
          echo "Found CloudFront distribution: ${DIST_ID}"

      - name: Get latest Lambda function versions
        id: get-lambda-versions
        run: |
          # Get latest version of viewer-request function
          VR_FUNCTION="${{ secrets.PROJECT_NAME }}-viewer-request"
          VR_VERSION=$(aws lambda list-versions-by-function \
            --function-name "${VR_FUNCTION}" \
            --region ${{ env.AWS_REGION }} \
            --query 'Versions[-1].Version' \
            --output text)

          VR_ARN="arn:aws:lambda:${{ env.AWS_REGION }}:$(aws sts get-caller-identity --query Account --output text):function:${VR_FUNCTION}:${VR_VERSION}"
          echo "viewer_request_arn=${VR_ARN}" >> $GITHUB_OUTPUT
          echo "Viewer Request ARN: ${VR_ARN}"

          # Get latest version of origin-response function
          OR_FUNCTION="${{ secrets.PROJECT_NAME }}-origin-response"
          OR_VERSION=$(aws lambda list-versions-by-function \
            --function-name "${OR_FUNCTION}" \
            --region ${{ env.AWS_REGION }} \
            --query 'Versions[-1].Version' \
            --output text)

          OR_ARN="arn:aws:lambda:${{ env.AWS_REGION }}:$(aws sts get-caller-identity --query Account --output text):function:${OR_FUNCTION}:${OR_VERSION}"
          echo "origin_response_arn=${OR_ARN}" >> $GITHUB_OUTPUT
          echo "Origin Response ARN: ${OR_ARN}"

      - name: Get current distribution config
        id: get-config
        run: |
          aws cloudfront get-distribution-config \
            --id ${{ steps.get-distribution.outputs.distribution_id }} \
            --output json > dist-config.json

          ETAG=$(jq -r '.ETag' dist-config.json)
          echo "etag=${ETAG}" >> $GITHUB_OUTPUT
          echo "Current ETag: ${ETAG}"

      - name: Show current Lambda@Edge associations
        run: |
          echo "Current Lambda@Edge associations:"
          jq -r '.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items[]' dist-config.json

      - name: Update Lambda@Edge associations
        run: |
          VIEWER_REQUEST_ARN="${{ steps.get-lambda-versions.outputs.viewer_request_arn }}"
          ORIGIN_RESPONSE_ARN="${{ steps.get-lambda-versions.outputs.origin_response_arn }}"

          # Update the distribution config with new Lambda ARNs
          jq --arg vr_arn "$VIEWER_REQUEST_ARN" \
             --arg or_arn "$ORIGIN_RESPONSE_ARN" \
             '.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items = [
               {
                 "LambdaFunctionARN": $vr_arn,
                 "EventType": "viewer-request",
                 "IncludeBody": false
               },
               {
                 "LambdaFunctionARN": $or_arn,
                 "EventType": "origin-response",
                 "IncludeBody": false
               }
             ] |
             .DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Quantity = 2 |
             .DistributionConfig' dist-config.json > updated-config.json

          echo "Updated Lambda@Edge associations:"
          jq -r '.DefaultCacheBehavior.LambdaFunctionAssociations.Items[]' updated-config.json

      - name: Apply CloudFront configuration update
        run: |
          aws cloudfront update-distribution \
            --id ${{ steps.get-distribution.outputs.distribution_id }} \
            --distribution-config file://updated-config.json \
            --if-match ${{ steps.get-config.outputs.etag }}

          echo "CloudFront distribution updated successfully"

      - name: Wait for deployment status
        run: |
          echo "Checking deployment status..."
          STATUS=$(aws cloudfront get-distribution \
            --id ${{ steps.get-distribution.outputs.distribution_id }} \
            --query 'Distribution.Status' \
            --output text)

          echo "Current status: ${STATUS}"
          echo "Note: Full deployment to all edge locations may take 15-30 minutes"

      - name: CloudFront update summary
        run: |
          echo "## CloudFront Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${{ secrets.PROJECT_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Distribution ID**: ${{ steps.get-distribution.outputs.distribution_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Viewer Request ARN**: ${{ steps.get-lambda-versions.outputs.viewer_request_arn }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Origin Response ARN**: ${{ steps.get-lambda-versions.outputs.origin_response_arn }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Status" >> $GITHUB_STEP_SUMMARY
          echo "- CloudFront distribution has been updated with the latest Lambda@Edge function versions" >> $GITHUB_STEP_SUMMARY
          echo "- Changes will propagate to all edge locations within 15-30 minutes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "You can monitor the deployment status in the [CloudFront Console](https://console.aws.amazon.com/cloudfront/v3/home#/distributions/${{ steps.get-distribution.outputs.distribution_id }})" >> $GITHUB_STEP_SUMMARY
